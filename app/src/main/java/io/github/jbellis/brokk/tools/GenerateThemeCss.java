package io.github.jbellis.brokk.tools;

import io.github.jbellis.brokk.gui.mop.ThemeColors;
import java.awt.Color;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.Locale;
import java.util.Map;

/**
 * Tiny CLI that dumps both theme blocks into a single SCSS file. It is intentionally dependency-free; everything lives
 * in JDK + Brokk classes.
 *
 * <p>Usage (manual): $ sbt "runMain io.github.jbellis.brokk.tools.GenerateThemeCss [outputPath]"
 */
public final class GenerateThemeCss {
    public static void main(String[] args) throws IOException {
        // Default destination if none supplied
        Path target = Path.of(args.length > 0 ? args[0] : "frontend-mop/src/styles/theme-colors.generated.scss");

        Files.createDirectories(target.getParent());

        String darkBlock = toCssVariables(true);
        String lightBlock = toCssVariables(false);

        String banner =
                """
            /*  AUTO-GENERATED by GenerateThemeCss
             *  DO NOT EDIT — changes will be overwritten at build time.
             */
            """;

        String content = banner + "\n" + darkBlock + "\n" + lightBlock + "\n";

        Files.writeString(target, content);
        System.out.printf("Theme SCSS written to %s (%d bytes)%n", target.toAbsolutePath(), content.length());
    }

    // Utility class – prevent instantiation
    private GenerateThemeCss() {}

    /**
     * Converts theme colors to CSS variables for a specific theme.
     *
     * @param isDarkTheme true for dark theme, false for light theme
     * @return String containing CSS variables block
     */
    private static String toCssVariables(boolean isDarkTheme) {
        StringBuilder sb = new StringBuilder();
        sb.append(":root").append(isDarkTheme ? ".theme-dark" : ".theme-light").append(" {\n");

        // Get the appropriate color map
        Map<String, Color> colors = ThemeColors.getAllColors(isDarkTheme);

        colors.entrySet().stream().sorted(Map.Entry.comparingByKey()).forEach(entry -> {
            String key = entry.getKey();
            Color color = entry.getValue();
            // Convert color to hex format
            String hexColor = String.format("#%02x%02x%02x", color.getRed(), color.getGreen(), color.getBlue());
            // Convert camelCase or snake_case to kebab-case for CSS variables
            String cssVarName =
                    key.replaceAll("([a-z])([A-Z])", "$1-$2").replace('_', '-').toLowerCase(Locale.ROOT);
            sb.append("  --").append(cssVarName).append(": ").append(hexColor).append(";\n");
        });

        sb.append("}");
        return sb.toString();
    }
}
